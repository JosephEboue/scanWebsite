name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  # workflow_dispatch:
  #   inputs:
  #     deploy_:
  #       description: "Déploiement sur Play-With-Docker"
  #       required: fals
  #       default: "false"
env:
  PLAYWD: ip172-18-0-38-curro82im2rg00bi4b1g

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Flask Server Image
        run: docker build -t flask_server ./website/flask_server

      - name: Build Client Image
        run: docker build -t client ./website/client

      - name: Save Docker Images as Artifacts
        run: |
          docker save flask_server -o flask_server.tar
          docker save client -o client.tar

      - name: Upload Docker Images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            flask_server.tar
            client.tar

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          docker load -i flask_server.tar
          docker load -i client.tar

      - name: Run Backend Tests (Flask)
        run: docker run --rm flask_server python -m pytest /app/Test/TestServerRoutes.py

  push:
    name: 📤 Docker Push
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          docker load -i flask_server.tar
          docker load -i client.tar

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Tag & Push Flask Server
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          docker tag flask_server ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:flask_server-$COMMIT_HASH
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:flask_server-$COMMIT_HASH

      - name: 🏷️ Tag & Push Client
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          docker tag client ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:client-$COMMIT_HASH
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:client-$COMMIT_HASH

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: push
    #if: github.event.inputs.deploy_prod == 'true' 
    
    environment:
      name: preProd
      url: http://${{ env.PLAYWD }}-8080.direct.labs.play-with-docker.com  

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Récupération du code source

      # 🛠️ Installer Docker CLI et Docker Compose
      - name: 🛠️ Install Docker CLI & Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose 
      
      # 🔌 Connexion à Play-With-Docker
      - name: 🔌 Connect to Play-With-Docker
        run: |
          export DOCKER_HOST=tcp://${{ env.PLAYWD }}.direct.labs.play-with-docker.com:2375
        
      - name: 🔐 Log in to Docker Hub
      uses: docker/login-action@v4
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 📦 Déployer l'application sur Play-With-Docker
      - name: 📦 Deploy Application
        run: |
          # Télécharger les images depuis Docker Hub
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:flask_server-${{ github.sha }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:client-${{ github.sha }}
          
          # Déployer avec Docker Compose
          docker-compose down 
          docker-compose up -d  
