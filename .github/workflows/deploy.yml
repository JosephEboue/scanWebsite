name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  # workflow_dispatch:
  #   inputs:
  #     deploy_:
  #       description: "Déploiement sur Play-With-Docker"
  #       required: fals
  #       default: "false"
env:
  PLAYWD: ip172-18-0-72-cus40kiim2rg00dce7t0

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Flask Server Image
        run: docker build -t flask_server ./website/flask_server

      - name: Build Client Image
        run: docker build -t client ./website/client

      - name: Save Docker Images as Artifacts
        run: |
          docker save flask_server -o flask_server.tar
          docker save client -o client.tar

      - name: Upload Docker Images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            flask_server.tar
            client.tar

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          docker load -i flask_server.tar
          docker load -i client.tar

      - name: Run Backend Tests (Flask)
        run: docker run --rm flask_server python -m pytest /app/Test/TestServerRoutes.py

  push:
    name: 📤 Docker Push
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker Images
        run: |
          docker load -i flask_server.tar
          docker load -i client.tar

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Tag & Push Flask Server
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          docker tag flask_server ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:flask_server-${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:flask_server-${{ github.sha }}

      - name: 🏷️ Tag & Push Client
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          docker tag client ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:client-${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/scanwebsite:client-${{ github.sha }}

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: push
    #if: github.event.inputs.deploy_prod == 'true' 
    
    environment:
      name: preprod
      url: 
          http://${{ env.PLAYWD }}-8080.direct.labs.play-with-docker.com # Frontend (client)
          http://${{ env.PLAYWD }}-5000.direct.labs.play-with-docker.com # Backend (Flask)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Récupération du code source
        
      # 🛠️ Installer Docker CLI et Docker Compose
      - name: 🛠️ Install Docker CLI & Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose 

      # Remplacement dynamique de PLAYWD dans .env.preprod
      - name: 🔄 Remplacement dynamique de PLAYWD dans .env.preprod
        run: |
          sed -i "s|${PLAYWD}|${{ env.PLAYWD }}|g" website/client/.env.preprod

      # 🔌 Connexion et déploiment sur Play-With-Docker
      - name: 🔌 Connect & Deploy 📦
        run: |
          # Définir une variable avec le SHA complet du commit
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export COMMIT_HASH=${{ github.sha }}

          export DOCKER_HOST=tcp://${{ env.PLAYWD }}.direct.labs.play-with-docker.com:2375
          docker info
          
          # Remplacer dynamiquement les variables d'environnement dans docker-compose.yml
          envsubst < docker-compose.yml > docker-compose.temp.yml

          # Déployer avec Docker Compose
            docker-compose -f docker-compose.temp.yml down
            docker-compose -f docker-compose.temp.yml up -d
